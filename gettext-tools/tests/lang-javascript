#! /bin/sh
. "${srcdir=.}/init.sh"; path_prepend_ . ../src

# Test of gettext facilities in the JavaScript language.
# Assumes an fr_FR locale is installed.
# Assumes the following packages are installed: gjs.

cat <<\EOF > prog.js
const Format = imports.format;
const Gettext = imports.gettext;

String.prototype.format = Format.format;
const _ = Gettext.gettext;

Gettext.textdomain ("prog");
Gettext.bindtextdomain ("prog", ".");
print(_("'Your command, please?', asked the waiter."));
print(_("%s is replaced by %s.").format("FF", "EUR"));
EOF

: ${XGETTEXT=xgettext}
${XGETTEXT} -o prog.tmp --omit-header --no-location prog.js || Exit 1
LC_ALL=C tr -d '\r' < prog.tmp > prog.pot || Exit 1

cat <<\EOF > prog.ok
msgid "'Your command, please?', asked the waiter."
msgstr ""

#, javascript-format
msgid "%s is replaced by %s."
msgstr ""
EOF

: ${DIFF=diff}
${DIFF} prog.ok prog.pot || Exit 1

cat <<\EOF > fr.po
msgid ""
msgstr "Content-Type: text/plain; charset=ISO-8859-1\n"

msgid "'Your command, please?', asked the waiter."
msgstr "«Votre commande, s'il vous plait», dit le garçon."

# Reverse the arguments.
#, javascript-format
msgid "%s is replaced by %s."
msgstr "%2$s remplace %1$s."
EOF

: ${MSGMERGE=msgmerge}
${MSGMERGE} -q -o fr.po.tmp fr.po prog.pot || Exit 1
LC_ALL=C tr -d '\r' < fr.po.tmp > fr.po.new || Exit 1

: ${DIFF=diff}
${DIFF} fr.po fr.po.new || Exit 1

test -d fr || mkdir fr
test -d fr/LC_MESSAGES || mkdir fr/LC_MESSAGES

: ${MSGFMT=msgfmt}
${MSGFMT} -c -o fr/LC_MESSAGES/prog.mo fr.po

# Test for presence of gjs.
(gjs -h) >/dev/null 2>/dev/null \
  || { echo "Skipping test: gjs not found"; Exit 77; }
(gjs -c imports.gettext) >/dev/null 2>/dev/null \
  || { echo "Skipping test: gjs gettext module not found"; Exit 77; }
(gjs -c imports.format) >/dev/null 2>/dev/null \
  || { echo "Skipping test: gjs format module not found"; Exit 77; }
# Test for presence of gjs version 1.40 or newer.
(gjs -c 'print(imports.format.vprintf("%3$s%2$s%1$s", ["x","y","z"]))') 2>/dev/null | grep zyx >/dev/null \
  || { echo "Skipping test: gjs version is older than 1.40"; Exit 77; }
# On some versions of macOS, gjs from Homebrew is installed without a working 'textdomain' binding, leading to an error
#   Gjs-CRITICAL **: 11:03:06.647: JS ERROR: GIRepository.InvokeError: Could not locate gjs_textdomain: dlopen(libgjs.0.dylib, 0x0009): tried: 'libgjs.0.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OSlibgjs.0.dylib' (no such file), '/opt/homebrew/Cellar/gjs/1.86.0/bin/../../../../opt/glib/lib/libgjs.0.dylib' (no such file), '/usr/lib/libgjs.0.dylib' (no such file, not in dyld cache), 'libgjs.0.dylib' (no such file)
#   textdomain@resource:///org/gnome/gjs/modules/core/_gettext.js:31:5
#   @prog.js:7:9
case "$host_os" in
  darwin*) echo "Skipping test: gjs gettext module possibly broken"; Exit 77;;
esac

# Test which of the fr_FR locales are installed.
: ${LOCALE_FR=fr_FR}
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
# gjs on macOS supports only UTF-8 locales.
case "$host_os" in
  darwin*) LOCALE_FR=none ;;
esac
if test $LOCALE_FR != none; then
  LC_ALL=$LOCALE_FR ../testlocale
  case $? in
    0) ;;
    77) LOCALE_FR=none;;
    *) Exit 1;;
  esac
fi
if test $LOCALE_FR_UTF8 != none; then
  LC_ALL=$LOCALE_FR_UTF8 ../testlocale
  case $? in
    0) ;;
    77) LOCALE_FR_UTF8=none;;
    *) Exit 1;;
  esac
fi
if test $LOCALE_FR = none && test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french locale is installed"
  else
    echo "Skipping test: no french locale is supported"
  fi
  Exit 77
fi

: ${DIFF=diff}
cat <<\EOF > prog.ok
«Votre commande, s'il vous plait», dit le garçon.
EUR remplace FF.
EOF
cat <<\EOF > prog.oku
Â«Votre commande, s'il vous plaitÂ», dit le garÃ§on.
EUR remplace FF.
EOF

: ${LOCALE_FR=fr_FR}
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR != none; then
  LANGUAGE= LC_ALL=$LOCALE_FR gjs prog.js > prog.out || Exit 1
  ${DIFF} prog.ok prog.out || Exit 1
fi
if test $LOCALE_FR_UTF8 != none; then
  LANGUAGE= LC_ALL=$LOCALE_FR_UTF8 gjs prog.js > prog.out || Exit 1
  ${DIFF} prog.oku prog.out || Exit 1
fi

Exit 0
